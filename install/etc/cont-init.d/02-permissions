#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Permissions Management Script
#
# Purpose: Configures user/group IDs and group memberships based on environment variables
# Context: Runs in s6-overlay initialization sequence (02-permissions)
# Note: Processes USER_*, GROUP_*, and GROUP_ADD_* environment variables to modify
#       system users, groups, and group memberships for container permission mapping
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# CONFIGURATION - FRAMEWORK SETUP
#-----------------------------------------------------------------------------
# Load the core container framework library for utility functions
source /assets/functions/00-container

# Configure logging context and disable debug output during execution
output_off

# Disable shellcheck warning for PROCESS_NAME variable (used by framework)
# shellcheck disable=SC2034
PROCESS_NAME="permissions"

#-----------------------------------------------------------------------------
# CONFIGURATION - PERMISSION FEATURE TOGGLES
#-----------------------------------------------------------------------------
# Determine if permissions management is enabled based on ENABLE_PERMISSIONS variable
# Uses framework helper functions for boolean evaluation
if var_true "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=TRUE
elif var_false "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=FALSE
fi

# Enable debug logging if DEBUG_PERMISSIONS is set to true
if var_true "${DEBUG_PERMISSIONS}" ; then
  CONTAINER_LOG_LEVEL="DEBUG"
fi

#-----------------------------------------------------------------------------
# MAIN EXECUTION - PERMISSIONS PROCESSING
#-----------------------------------------------------------------------------
# Only proceed with permissions processing if explicitly enabled
if var_true "${CONTAINER_ENABLE_PERMISSIONS}" ; then
  print_debug "Enabling permissions features"

  #---------------------------------------------------------------------------
  # USER ID MODIFICATION
  #---------------------------------------------------------------------------
  # Extract all USER_* and CONTAINER_USER_* environment variables
  # These variables define user ID mappings in format: USER_username=new_uid
  unames="$(set -o posix ; set | sort | grep -e '^USER_' | sed "s|^USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n') "
  unames+="$(set -o posix ; set | sort | grep -e '^CONTAINER_USER_' | sed "s|^CONTAINER_USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n')"

  # Process each user ID mapping
  for upair in $unames; do
    uname=$(echo "${upair}" | cut -d = -f 1)
    uid=$(echo "${upair}" | cut -d = -f 2)

    # Check if user exists in /etc/passwd, with fallback for underscore/dash naming
    # Some systems use dashes instead of underscores in usernames
    _userexists=false
    if grep -e "^${uname}" /etc/passwd > /dev/null; then
      _userexists=true
    elif grep -e "^${uname/_/-}" /etc/passwd > /dev/null; then
      _userexists=true
      uname=${uname/_/-}
    fi

    # Modify user ID if user exists
    if [ "${_userexists}" = true ] ; then
      ouid=$(grep -e "^${uname}" /etc/passwd | awk -F: '{print $3}')

      # NOTE: Variable '${u}' in original appears to be a typo - should likely be '${uname}'
      print_debug "Changing user '${u}' to uid '${uid}' from '${ouid}'"
      sed -i "s|${uname}:x:${ouid}:|${uname}:x:${uid}:|g" /etc/passwd
    fi
  done

  #---------------------------------------------------------------------------
  # GROUP ID MODIFICATION
  #---------------------------------------------------------------------------
  # Extract all GROUP_* and CONTAINER_GROUP_* environment variables (excluding GROUP_ADD_* variants)
  # These variables define group ID mappings in format: GROUP_groupname=new_gid
  groups="$(set -o posix ; set | sort | grep -e '^GROUP_' | sed "s|^GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "
  groups+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_' | sed "s|^CONTAINER_GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "

  # Process each group ID mapping
  for gpair in $groups; do
    gname=$(echo "${gpair}" | cut -d = -f 1)
    gid=$(echo "${gpair}" | cut -d = -f 2)

    # Check if group exists in /etc/group, with fallback for underscore/dash naming
    _groupexists=false
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Modify group ID if group exists
    if [ "${_groupexists}" = true ] ; then
      # Get current group ID from /etc/passwd (primary group field)
      opgid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $4}')
      # Get group info from /etc/group
      og=$(grep -e "^${gname}" /etc/group | awk -F: '{print $1}')
      oggid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')

      print_debug "Changing group '${gname}' to gid '${gid}' from '${oggid}'"

      # Update group ID in both /etc/passwd (for primary group references) and /etc/group
      sed -i "s|\(.*\):\(.*\):\(.*\):${opgid}:|\1:\2:\3:${gid}:|g" /etc/passwd
      sed -i "s|${og}:x:${oggid}|${og}:x:${gid}|g" /etc/group
    fi
  done

  #---------------------------------------------------------------------------
  # GROUP MEMBERSHIP MANAGEMENT
  #---------------------------------------------------------------------------
  # Extract all GROUP_ADD_* and CONTAINER_GROUP_ADD_* environment variables
  # These variables define user additions to groups in format: GROUP_ADD_groupname=user1,user2,user3
  groupsadd="$(set -o posix ; set | sort | grep -e '^GROUP_ADD_' | sed 's|^GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' ) "
  groupsadd+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_ADD_' | sed 's|^CONTAINER_GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' )"

  # Process each group membership addition
  for gapair in $groupsadd; do
    gname=$(echo "${gapair}" | cut -d = -f1 )

    # Check if target group exists, with fallback for underscore/dash naming
    _groupexists=false
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Add users to group if group exists
    if [ "${_groupexists}" = true ] ; then
      # Extract comma-separated list of users and convert to space-separated
      uta=$(echo ${gapair} | cut -d = -f2 | tr ',' '\n')

      # Process each user to be added to the group
      for userstogroup in ${uta} ; do
        print_debug "Adding user '${userstogroup}' to '${gname}'"

        # Detect OS type from /etc/os-release for appropriate command selection
        os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)

        # Use OS-specific commands for adding users to groups
        case ${os,,} in
          "alpine" )
            # Alpine Linux uses addgroup command
            silent addgroup ${userstogroup} ${gname}
          ;;
          "debian" | "ubuntu" )
            # Debian/Ubuntu systems use usermod command with append flag
            silent usermod -a -G ${gname} ${userstogroup}
          ;;
        esac
      done
    fi
  done
fi

#-----------------------------------------------------------------------------
# FINALIZATION
#-----------------------------------------------------------------------------
# Mark this initialization script as completed in container state tracking
liftoff

# Re-enable output for subsequent initialization scripts
output_on

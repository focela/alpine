#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Permissions Management Script
#
# Purpose: Modify container user/group IDs and group memberships dynamically
# Context: Runs in s6-overlay environment as part of container initialization
# Note: Runs after timezone setup in the cont-init.d sequence (02-permissions)
#
# Environment Variables:
# - ENABLE_PERMISSIONS: Enable/disable permissions features
# - DEBUG_PERMISSIONS: Enable debug logging for permissions operations
# - USER_*: User ID mappings (e.g., USER_NGINX=1000)
# - CONTAINER_USER_*: Alternative user ID mappings
# - GROUP_*: Group ID mappings (e.g., GROUP_WWW_DATA=1000)
# - CONTAINER_GROUP_*: Alternative group ID mappings
# - GROUP_ADD_*: Group membership additions (e.g., GROUP_ADD_DOCKER=user1,user2)
# - CONTAINER_GROUP_ADD_*: Alternative group membership additions
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# INITIALIZATION
#-----------------------------------------------------------------------------
# Load container functions library and initialize process
source /assets/functions/00-container
output_off
# shellcheck disable=SC2034
PROCESS_NAME="permissions"

#-----------------------------------------------------------------------------
# CONFIGURATION
#-----------------------------------------------------------------------------
# Parse ENABLE_PERMISSIONS environment variable with fallback logic
if var_true "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=TRUE
elif var_false "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=FALSE
fi

# Enable debug logging if DEBUG_PERMISSIONS is set
if var_true "${DEBUG_PERMISSIONS}" ; then
  CONTAINER_LOG_LEVEL="DEBUG"
fi

#-----------------------------------------------------------------------------
# PERMISSIONS PROCESSING
#-----------------------------------------------------------------------------
# Only proceed if permissions features are enabled
if var_true "${CONTAINER_ENABLE_PERMISSIONS}" ; then
  print_debug "Enabling permissions features"

  #---------------------------------------------------------------------------
  # USER ID MODIFICATION
  #---------------------------------------------------------------------------
  # Extract all USER_* and CONTAINER_USER_* environment variables
  # Format: USER_<name>=<uid> or CONTAINER_USER_<name>=<uid>
  # Convert to lowercase and prepare for processing
  unames="$(set -o posix ; set | sort | grep -e '^USER_' | sed "s|^USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n') "
  unames+="$(set -o posix ; set | sort | grep -e '^CONTAINER_USER_' | sed "s|^CONTAINER_USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n')"

  # Process each user ID mapping
  for upair in $unames; do
    uname=$(echo "${upair}" | cut -d = -f 1)
    uid=$(echo "${upair}" | cut -d = -f 2)

    # Check if user exists in /etc/passwd (try both underscore and hyphen variants)
    if grep -e "^${uname}" /etc/passwd > /dev/null; then
      _userexists=true
    elif grep -e "^${uname/_/-}" /etc/passwd > /dev/null; then
      _userexists=true
      uname=${uname/_/-}  # Use hyphen variant if found
    fi

    # Modify user ID in /etc/passwd if user exists
    if [ "${_userexists}" = true ] ; then
      ouid=$(grep -e "^${uname}" /etc/passwd | awk -F: '{print $3}')
      print_debug "Changing user '${u}' to uid '${uid}' from '${ouid}'"
      # Direct sed modification of /etc/passwd: username:x:old_uid: -> username:x:new_uid:
      sed -i "s|${uname}:x:${ouid}:|${uname}:x:${uid}:|g" /etc/passwd
    fi
  done

  #---------------------------------------------------------------------------
  # GROUP ID MODIFICATION
  #---------------------------------------------------------------------------
  # Extract all GROUP_* and CONTAINER_GROUP_* environment variables (excluding GROUP_ADD_*)
  # Format: GROUP_<name>=<gid> or CONTAINER_GROUP_<name>=<gid>
  # Filter out GROUP_ADD_ variables to handle them separately
  groups="$(set -o posix ; set | sort | grep -e '^GROUP_' | sed "s|^GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "
  groups+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_' | sed "s|^CONTAINER_GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "

  # Process each group ID mapping
  for gpair in $groups; do
    gname=$(echo "${gpair}" | cut -d = -f 1)
    gid=$(echo "${gpair}" | cut -d = -f 2)

    # Check if group exists in /etc/group (try both underscore and hyphen variants)
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}  # Use hyphen variant if found
    fi

    # Modify group ID in both /etc/passwd and /etc/group if group exists
    if [ "${_groupexists}" = true ] ; then
      # Extract old group information from both files
      opgid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $4}')  # Primary group ID from passwd
      og=$(grep -e "^${gname}" /etc/group | awk -F: '{print $1}')      # Group name from group file
      oggid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')   # Group ID from group file

      print_debug "Changing group '${gname}' to gid '${gid}' from '${oggid}'"

      # Update primary group ID in /etc/passwd: user:x:uid:old_gid: -> user:x:uid:new_gid:
      sed -i "s|\(.*\):\(.*\):\(.*\):${opgid}:|\1:\2:\3:${gid}:|g" /etc/passwd

      # Update group ID in /etc/group: groupname:x:old_gid -> groupname:x:new_gid
      sed -i "s|${og}:x:${oggid}|${og}:x:${gid}|g" /etc/group
    fi
  done

  #---------------------------------------------------------------------------
  # GROUP MEMBERSHIP ADDITION
  #---------------------------------------------------------------------------
  # Extract all GROUP_ADD_* and CONTAINER_GROUP_ADD_* environment variables
  # Format: GROUP_ADD_<groupname>=<user1>,<user2>,<user3>
  # Used to add users to existing groups
  groupsadd="$(set -o posix ; set | sort | grep -e '^GROUP_ADD_' | sed 's|^GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' ) "
  groupsadd+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_ADD_' | sed 's|^CONTAINER_GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' )"

  # Process each group membership addition
  for gapair in $groupsadd; do
    gname=$(echo "${gapair}" | cut -d = -f1 )

    # Check if target group exists (try both underscore and hyphen variants)
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}  # Use hyphen variant if found
    fi

    # Add users to group if group exists
    if [ "${_groupexists}" = true ] ; then
      # Parse comma-separated user list from environment variable value
      uta=$(echo ${gapair} | cut -d = -f2 | tr ',' '\n')

      # Add each user to the specified group
      for userstogroup in ${uta} ; do
        print_debug "Adding user '${userstogroup}' to '${gname}'"

        # Use OS-specific commands for adding users to groups
        os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
        case ${os,,} in
          "alpine" )
            # Alpine Linux: use addgroup command
            silent addgroup ${userstogroup} ${gname}
          ;;
          "debian" | "ubuntu" )
            # Debian/Ubuntu: use usermod command with append flag
            silent usermod -a -G ${gname} ${userstogroup}
          ;;
        esac
      done
    fi
  done
fi

#-----------------------------------------------------------------------------
# FINAL INITIALIZATION
#-----------------------------------------------------------------------------
# Mark initialization complete and restore output
liftoff
output_on

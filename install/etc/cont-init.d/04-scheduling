#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Scheduling Configuration Script
#
# Purpose: Configures scheduled tasks (cron jobs) from environment variables
# Context: Runs in s6-overlay initialization sequence (04-scheduling)
# Note: Processes CRON_* environment variables from both runtime and default
#       configurations to generate cron job files with optional log rotation
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# CONFIGURATION - FRAMEWORK SETUP
#-----------------------------------------------------------------------------
# Load the core container framework library for utility functions
source /assets/functions/00-container

# Configure logging context and disable debug output during execution
output_off

# Prepare service for single-instance scheduling setup
prepare_service single
PROCESS_NAME="scheduling"

#-----------------------------------------------------------------------------
# CONFIGURATION - SCHEDULING BACKEND SELECTION
#-----------------------------------------------------------------------------
# Determine scheduling backend based on ENABLE_CRON variable
# Currently only cron is supported as a scheduling backend
if var_false "${ENABLE_CRON}" ; then
  CONTAINER_ENABLE_SCHEDULING=FALSE
fi

if var_true "${ENABLE_CRON}" ; then
  CONTAINER_ENABLE_SCHEDULING=TRUE
  CONTAINER_SCHEDULING_BACKEND="cron"
fi

#-----------------------------------------------------------------------------
# MAIN EXECUTION - SCHEDULING SETUP
#-----------------------------------------------------------------------------
# Check if scheduling is disabled and stop service if so
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
  print_debug "Disabling Scheduling"
  service_stop "$(basename "$0")"
else

  #---------------------------------------------------------------------------
  # BACKEND-SPECIFIC CONFIGURATION
  #---------------------------------------------------------------------------
  case "${CONTAINER_SCHEDULING_BACKEND,,}" in
    "cron" )

      #-----------------------------------------------------------------------
      # DIRECTORY AND LOGGING SETUP
      #-----------------------------------------------------------------------
      # Create temporary directory for cron processing
      mkdir -p /tmp/.container/cron

      # Setup file-based logging if requested
      if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
        mkdir -p "${SCHEDULING_LOG_LOCATION}"
        touch "${SCHEDULING_LOG_LOCATION}"/cron.log
        create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
      fi

      # Ensure scheduling location directory exists
      if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then
        mkdir -p "${CONTAINER_SCHEDULING_LOCATION}"
      fi

      #-----------------------------------------------------------------------
      # PHASE 1: RUNTIME ENVIRONMENT VARIABLE PROCESSING
      #-----------------------------------------------------------------------
      # Process CRON_* environment variables from runtime configuration
      # These override any default configurations
      print_debug "Processing runtime CRON_* environment variables"

      # Create temporary file to store extracted cron environment variables
      cronenv=$(mktemp)

      # Extract all CRON_* variables, remove CRON_ prefix, and save to temp file
      # Uses POSIX mode to ensure consistent variable listing
      set -o posix; set -f
      set | grep -E '^CRON_'| sed "s|CRON_||g" > ${cronenv}

      # Remove CRON_PERIOD entries (reserved/special variable)
      sed -i "/^PERIOD/d" "${cronenv}"

      # Process each cron entry from runtime variables
      while IFS= read -r cron_entry; do
        # Extract schedule name and value from variable assignment
        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]' )"
        schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"

        # Remove surrounding quotes from value (handles both single and double quotes)
        schedule_value="$(echo ${schedule_value:1:-1})"

        # Handle disabled/false cron entries
        if var_false "${schedule_value}" ; then
          print_debug "Disabling ${schedule_title} scheduled task"

          # Create disabled/nulled cron file
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command  generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
        else
          print_debug "Adding ${schedule_title} with to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"

          # Create active cron file with schedule
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
        fi
      done < ${cronenv}

      # Cleanup temporary file and variables
      rm -rf $cronenv
      set +f
      unset cronenv schedules cron_entry schedule_value schedule_title

      # Unset all CRON_* variables to prevent interference with next phase
      unset "${!CRON_@}"

      #-----------------------------------------------------------------------
      # PHASE 2: DEFAULT CONFIGURATION FILE PROCESSING
      #-----------------------------------------------------------------------
      # Process CRON_* variables from default configuration files
      # These provide fallback/default scheduled tasks if not overridden by runtime vars
      print_debug "Processing default configuration files for CRON_* variables"

      # Iterate through all default configuration files
      for d in /assets/defaults/* ; do
        # Skip the main container configuration file
        if [ "$d" != "/assets/defaults/00-container" ] ; then
          print_debug "Processing default file: ${d}"

          # Source the default file to load its variables
          # shellcheck source=/assets/defaults/
          output_off
          source $d
          output_on

          # Create temporary file for this default file's cron variables
          cronenv=$(mktemp)

          # Extract CRON_* variables from this default file
          set -o posix; set -f
          set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"

          # Remove CRON_PERIOD entries (reserved/special variable)
          sed -i "/^PERIOD/d" "${cronenv}"

          # Process each cron entry from this default file
          while IFS= read -r cron_entry; do
            schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
            schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"

            # Remove surrounding quotes from value
            schedule_value="$(echo ${schedule_value:1:-1})"

            # Only create cron file if it doesn't already exist (runtime vars take precedence)
            if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
              print_debug "Adding $schedule_title with value $schedule_value to crontab"

              # Create cron file from default configuration
              cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${d}'
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
            else
              print_debug "Skipping adding '${schedule_title}' as it already exists"
            fi
          done < "${cronenv}"

          # Cleanup for this iteration
          rm -rf $cronenv
          set +f
          unset cronenv schedules cron_entry schedule_value schedule_title

          # Unset CRON_* variables from this default file
          unset "${!CRON_@}"
        fi
      done

      print_notice "Container configured for scheduled tasks with 'cron'"
    ;;

    #-------------------------------------------------------------------------
    # UNSUPPORTED SCHEDULING BACKENDS
    #-------------------------------------------------------------------------
    *)
      print_error "Unknown Scheduling Backend"
      exit 1
    ;;
  esac
fi

#-----------------------------------------------------------------------------
# FINALIZATION
#-----------------------------------------------------------------------------
# Mark this initialization script as completed in container state tracking
liftoff

# Re-enable output for subsequent initialization scripts
output_on

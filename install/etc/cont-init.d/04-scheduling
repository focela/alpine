#!/command/with-contenv bash
#
# Scheduling configuration script
# Sets up and manages scheduled tasks (cron jobs) from environment variables
#

#------------------------------------------------------------------------------------------
# INITIAL SETUP
#------------------------------------------------------------------------------------------
# Import container functions and prepare service
source /assets/functions/00-container
output_off
prepare_service single
PROCESS_NAME="scheduling"

#------------------------------------------------------------------------------------------
# CONFIGURATION SETUP
#------------------------------------------------------------------------------------------
# Legacy support for older environment variable names
if var_false "${ENABLE_CRON}"; then
    CONTAINER_ENABLE_SCHEDULING=FALSE
fi

if var_true "${ENABLE_CRON}"; then
    CONTAINER_ENABLE_SCHEDULING=TRUE
    CONTAINER_SCHEDULING_BACKEND="cron"
fi

#------------------------------------------------------------------------------------------
# SCHEDULING SERVICE MANAGEMENT
#------------------------------------------------------------------------------------------
# Enable or disable scheduling based on configuration
if var_false "${CONTAINER_ENABLE_SCHEDULING}"; then
    print_debug "Disabling Scheduling"
    service_stop "$(basename "$0")"
else
    case "${CONTAINER_SCHEDULING_BACKEND,,}" in
        "cron")
            #------------------------------------------------------------------------------------------
            # CRON CONFIGURATION
            #------------------------------------------------------------------------------------------
            # Set up directories and logging
            mkdir -p /tmp/.container/cron

            # Set up logging if file logging is enabled
            if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ]; then
                mkdir -p "${SCHEDULING_LOG_LOCATION}"
                touch "${SCHEDULING_LOG_LOCATION}"/cron.log
                create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
            fi

            # Create scheduling directory if it doesn't exist
            if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then
                mkdir -p "${CONTAINER_SCHEDULING_LOCATION}"
            fi

            #------------------------------------------------------------------------------------------
            # RUNTIME ENVIRONMENT VARIABLES PROCESSING
            #------------------------------------------------------------------------------------------
            # Process CRON_* environment variables at runtime
            print_debug "Processing runtime CRON_* environment variables"
            cronenv=$(mktemp)
            set -o posix; set -f
            set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
            sed -i "/^PERIOD/d" "${cronenv}"

            while IFS= read -r cron_entry; do
                # Skip empty lines
                if [ -z "${cron_entry}" ]; then
                    continue
                fi

                schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
                schedule_value="$(echo ${cron_entry} | cut -d = -f2)"
                schedule_value="$(echo ${schedule_value:1:-1})"

                if var_false "${schedule_value}"; then
                    print_debug "Disabling ${schedule_title} scheduled task"
                    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
                else
                    print_debug "Adding ${schedule_title} to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"
                    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                fi
            done < "${cronenv}"

            rm -rf "${cronenv}"
            set +f
            unset cronenv cron_entry schedule_value schedule_title
            unset "${!CRON_@}"

            #------------------------------------------------------------------------------------------
            # DEFAULT FILES PROCESSING
            #------------------------------------------------------------------------------------------
            # Process CRON_* variables from default configuration files
            print_debug "Processing CRON_* variables from default configuration files"
            for default_file in /assets/defaults/*; do
                if [ "${default_file}" != "/assets/defaults/00-container" ]; then
                    # Load default file
                    output_off
                    source "${default_file}"
                    output_on

                    # Extract CRON_* variables
                    cronenv=$(mktemp)
                    set -o posix; set -f
                    set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
                    sed -i "/^PERIOD/d" "${cronenv}"

                    while IFS= read -r cron_entry; do
                        # Skip empty lines
                        if [ -z "${cron_entry}" ]; then
                            continue
                        fi

                        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
                        schedule_value="$(echo ${cron_entry} | cut -d = -f2)"
                        schedule_value="$(echo ${schedule_value:1:-1})"

                        if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ]; then
                            print_debug "Adding ${schedule_title} with value ${schedule_value} to crontab"
                            cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${default_file}'
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                        else
                            print_debug "Skipping adding '${schedule_title}' as it already exists"
                        fi
                    done < "${cronenv}"

                    rm -rf "${cronenv}"
                    set +f
                    unset cronenv cron_entry schedule_value schedule_title
                    unset "${!CRON_@}"
                fi
            done

            print_notice "Container configured for scheduled tasks with 'cron'"
        ;;
        *)
            print_error "Unknown Scheduling Backend: ${CONTAINER_SCHEDULING_BACKEND}"
            exit 1
        ;;
    esac
fi

# Mark initialization complete
liftoff
output_on

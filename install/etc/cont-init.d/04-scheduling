#!/command/with-contenv bash

### Load necessary functions
source /assets/functions/00-container

### Disable verbose output for cleaner logs
output_off

### Prepare service with 'single' configuration mode
prepare_service single

# Set process name for logging
PROCESS_NAME="scheduling"

### Legacy Configuration Handling
# Convert legacy ENABLE_CRON variable to the new format
if var_false "${ENABLE_CRON}" ; then
    CONTAINER_ENABLE_SCHEDULING=FALSE
fi

if var_true "${ENABLE_CRON}" ; then
    CONTAINER_ENABLE_SCHEDULING=TRUE
    CONTAINER_SCHEDULING_BACKEND="cron"
fi

### Main Configuration for Scheduling
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
    print_debug "Disabling Scheduling"
    service_stop "$(basename "$0")"
else
    case "${CONTAINER_SCHEDULING_BACKEND,,}" in
        "cron" )
            # Prepare cron directory
            mkdir -p /tmp/.container/cron

            # Setup logging for cron if enabled
            if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
                mkdir -p "${SCHEDULING_LOG_LOCATION}"
                touch "${SCHEDULING_LOG_LOCATION}/cron.log"
                create_logrotate cron "${SCHEDULING_LOG_LOCATION}/cron.log"
            fi

            # Ensure scheduling location exists
            [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ] && mkdir -p "${CONTAINER_SCHEDULING_LOCATION}"

            ### Parse CRON_ environment variables
            cronenv=$(mktemp)
            set -o posix; set -f
            set | grep -E '^CRON_' | sed "s|CRON_||g" > "${cronenv}"
            sed -i "/^PERIOD/d" "${cronenv}"

            while IFS= read -r cron_entry; do
                schedule_title=$(echo "${cron_entry}" | cut -d = -f1 | tr '[:upper:]' '[:lower:]')
                schedule_value=$(echo "${cron_entry}" | cut -d = -f2 | sed 's/^"\|"$//g')

                if var_false "${schedule_value}" ; then
                    # Disable specific scheduled task
                    print_debug "Disabling ${schedule_title} scheduled task"
                    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
                else
                    # Enable specific scheduled task
                    print_debug "Adding ${schedule_title} for execution"
                    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                fi
            done < "${cronenv}"
            rm -f "${cronenv}"
            unset cronenv schedule_title schedule_value cron_entry

            ### Add default schedules
            for d in /assets/defaults/* ; do
                if [ "$d" != "/assets/defaults/00-container" ] ; then
                    # Load defaults from available files
                    output_off
                    source "$d"
                    output_on

                    cronenv=$(mktemp)
                    set | grep -E '^CRON_' | sed "s|CRON_||g" > "${cronenv}"
                    sed -i "/^PERIOD/d" "${cronenv}"

                    while IFS= read -r cron_entry; do
                        schedule_title=$(echo "${cron_entry}" | cut -d = -f1 | tr '[:upper:]' '[:lower:]')
                        schedule_value=$(echo "${cron_entry}" | cut -d = -f2 | sed 's/^"\|"$//g')

                        if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
                            print_debug "Adding default schedule: ${schedule_title}"
                            cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled task from default: ${d}
# Entered Value: ${schedule_value}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                        else
                            print_debug "Skipping '${schedule_title}' as it already exists"
                        fi
                    done < "${cronenv}"
                    rm -f "${cronenv}"
                    unset cronenv schedule_title schedule_value cron_entry
                fi
            done

            print_notice "Scheduling configured with 'cron'"
            ;;
        *)
            print_error "Unknown Scheduling Backend"
            exit 1
            ;;
    esac
fi

# Finalize setup and re-enable output
liftoff
output_on

#!/command/with-contenv bash

### Initial setup for permissions
# Set permissions for required directories
chmod -f -R 0755 /assets/{defaults,functions} > /dev/null 2>&1
chmod -f -R 0755 /etc/{cont-init.d,cont-finish.d,services.available} > /dev/null 2>&1

# Load container functions
source /assets/functions/00-container

# Turn off debug output
output_off

# Set process name for initialization
PROCESS_NAME="container-init"

# Display information about the container
showoff

### Clean up and initialize logging
# Clean OS logrotate directory
rm -rf /etc/logrotate.d/*
mkdir -p /assets/logrotate

# Setup logging directory and log file
mkdir -p "${CONTAINER_LOG_FILE_PATH}"
touch "${CONTAINER_LOG_FILE_PATH}/${CONTAINER_LOG_FILE_NAME}"
echo "** Container Name: ${CONTAINER_NAME} - Commencing Logging" >> "${CONTAINER_LOG_FILE_PATH}/${CONTAINER_LOG_FILE_NAME}"
create_logrotate container "${CONTAINER_LOG_FILE_PATH}/${CONTAINER_LOG_FILE_NAME}"

### Detect and handle container restart
if [ -d "/tmp/.container" ] ; then
    # Clean up temporary container files during warm restart
    print_notice "Detected Container that has been restarted - Cleaning '/tmp/.container' files"
    rm -rf /tmp/.container/*
    rm -rf /etc/services.d/*
    echo "$(date +%s) $(date +'%Y-%m-%d %H:%M:%S %Z') - Warm restart detected" >> /tmp/.container/container-restart
else
    # Initialize services during cold start
    print_debug "Cold Container startup detected - Proceeding to initialize services normally"
    mkdir -p /tmp/.container/
    echo "$(date +%s) $(date +'%Y-%m-%d %H:%M:%S %Z') - Container started" >> /tmp/.container/container-startup
fi

### Update .bashrc with utility functions and aliases
# Add shortcuts to .bashrc for easier container management
print_debug "Adding shortcuts to .bashrc"
cat <<EOF >> /root/.bashrc
source /assets/functions/00-container
alias env='with-contenv env | sort'

# Define helper functions for managing services
service_down() {
    ## Stop specified or all services
    case "\${1}" in
        all )
            echo "** Disabling all services"
            for service in /var/run/s6/legacy-services/* ; do
                echo "** Disabling s6 service '\$(basename \${service})'"
                s6-svc -d /var/run/s6/legacy-services/\$(basename \${service})
            done
        ;;
        * )
            if [ -d "/var/run/s6/legacy-services/\$1" ] ; then
                echo "** Disabling s6 service '\$1'"
                s6-svc -d /var/run/s6/legacy-services/\$1
            fi
        ;;
    esac
}

service_list() {
    ## List all active services
    ls -1 /var/run/s6/legacy-services
}

service_reset() {
    ## Reset specified or all services
    case "\${1}" in
        all )
            echo "** Resetting all services"
            for service in /var/run/s6/legacy-services/* ; do
                echo "** Reset s6 service '\$(basename \${service})'"
                rm -rf /tmp/.container/\$(basename \${service})
            done
        ;;
        * )
            if [ -d "/var/run/s6/legacy-services/\$1" ] ; then
                echo "** Reset s6 service '\$1'"
                rm -rf /tmp/.container/\$1
            fi
        ;;
    esac
}

service_up() {
    ## Start specified or all services
    case "\${1}" in
        all )
            echo "** Enabling all services"
            for service in /var/run/s6/legacy-services/* ; do
                echo "** Enabling s6 service '\$(basename \${service})'"
                s6-svc -u /var/run/s6/legacy-services/\$(basename \${service})
            done
        ;;
        * )
            if [ -d "/var/run/s6/legacy-services/\$1" ] ; then
                echo "** Enabling s6 service '\$1'"
                s6-svc -u /var/run/s6/legacy-services/\$1
            fi
        ;;
    esac
}
EOF

### Handle changelogs
# Display last changelog version for the running image
if [ -f "/assets/.changelogs/${IMAGE_NAME/\//_}.md" ]; then
    changelogname="/assets/.changelogs/${IMAGE_NAME/\//_}.md"
elif [ -f "/assets/.changelogs/docker-${IMAGE_NAME/\//_}.md" ]; then
    changelogname="/assets/.changelogs/docker-${IMAGE_NAME/\//_}.md"
else
    strip_image_repo_url=$(echo ${IMAGE_REPO_URL%/} | sed "s#https://github.com/##g")
    if [ -f "/assets/.changelogs/${strip_image_repo_url/\//_}.md" ]; then
        changelogname="/assets/.changelogs/${strip_image_repo_url/\//_}.md"
    fi
fi

if [ -z "${changelogname// }" ]; then
    print_debug "Not adding 'changelog' command to .bashrc"
    echo "image_changelog() { echo '** No changelog detected. Check /assets/.changelogs'; }" >> /root/.bashrc
else
    print_debug "Adding 'changelog' command to .bashrc"
    echo "image_changelog() { awk '/^##/{p++} p==2{print; exit} p>=1' $changelogname | sed '\$d'; }" >> /root/.bashrc
fi

### Rewrite Bash Prompt
if [ -n "${CONTAINER_CUSTOM_BASH_PROMPT}" ]; then
    bash_prompt=${CONTAINER_CUSTOM_BASH_PROMPT}
else
    image_version=$(get_image_version)
    if [ ! -z "${image_version// }" ]; then
        bash_ver=":${image_version}"
    fi
    bash_prompt="[${IMAGE_NAME}${bash_ver} \\t \\w] $ "
fi
echo "export PS1=\"${bash_prompt/  /}\"" >> /root/.bashrc

### Add utilities to .bashrc
cat <<EOF >> /root/.bashrc
# Helper function for reading compressed files
zcat () {
    if [ -f "\$@" ]; then
        case "\$@" in
            *.zst* ) $(which zstdcat) "\$@" ;;
            *.bz*)  $(which bzcat) "\$@" ;;
            *.gz*)  $(which gzcat) "\$@" ;;
            *.xz)   $(which xzcat) "\$@" ;;
        esac
    else
        echo "'\$@' is not a valid file!"
    fi
}
EOF

### Finalize setup
host_override
liftoff
output_on

#!/command/with-contenv bash

### Load necessary functions
source /assets/functions/00-container

### Disable verbose output for cleaner logs
output_off

### Prepare service with 'single' configuration mode
prepare_service single

# Set process name for logging
PROCESS_NAME="monitoring"

### Legacy Configuration Handling
# Convert legacy ENABLE_ZABBIX variable to the new format
if var_false "${ENABLE_ZABBIX}"; then
    CONTAINER_ENABLE_MONITORING=FALSE
fi

if var_true "${ENABLE_ZABBIX}"; then
    CONTAINER_ENABLE_MONITORING=TRUE
    CONTAINER_MONITORING_BACKEND=zabbix
fi

### Main Configuration for Monitoring
if var_true "${CONTAINER_ENABLE_MONITORING}" ; then
    case "${CONTAINER_MONITORING_BACKEND,,}" in
        "zabbix" )
            print_debug "Using Zabbix Backend"

            # Determine OS type
            os=$(cat /etc/os-release | grep ^ID= | cut -d = -f2)

            # Set debug level for Zabbix if DEBUG_MODE is enabled
            if var_true "${DEBUG_MODE}" ; then
                ZABBIX_DEBUGLEVEL=4
            fi

            # Grant permissions for Zabbix user if required
            if var_true "${ZABBIX_USER_SUDO}" ; then
                grant_sudo zabbix
            fi

            if var_true "${ZABBIX_USER_DOAS}" ; then
                grant_doas zabbix
            fi

            ### PSK Encryption Configuration
            # Handle Zabbix encryption using PSK if defined
            if [ -n "${ZABBIX_ENCRYPT_PSK_ID}" ] || [ -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] || [ -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] ; then
                transform_file_var ZABBIX_ENCRYPT_PSK_ID ZABBIX_ENCRYPT_PSK_KEY
                print_debug "Zabbix Agent - Using PSK Encryption"

                if [ ! -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] && [ ! -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] ; then
                    print_error "Zabbix Agent PSK Encryption requires a file or a key!"
                    exit 1
                fi

                # Automatically create PSK file if key is provided
                if [ ! -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] && [ -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] ; then
                    print_debug "Creating PSK file from key"
                    mkdir -p "${ZABBIX_CERT_PATH}"
                    ZABBIX_ENCRYPT_PSK_FILE="zabbix_agent.psk"
                    echo "${ZABBIX_ENCRYPT_PSK_KEY}" > "${ZABBIX_CERT_PATH}"/"${ZABBIX_ENCRYPT_PSK_FILE}"
                fi

                # Set appropriate permissions for PSK file
                chmod -f 0600 "${ZABBIX_CERT_PATH}"/"${ZABBIX_ENCRYPT_PSK_FILE}"
                chown -f -R "${ZABBIX_USER}" "${ZABBIX_CERT_PATH}"

                # Generate PSK configuration
                tls_psk=$(cat <<EOF
TLSConnect=psk
TLSPSKIdentity=${ZABBIX_ENCRYPT_PSK_ID}
TLSPSKFile=${ZABBIX_CERT_PATH}/${ZABBIX_ENCRYPT_PSK_FILE}
EOF
                )
            fi

            ### Configure Zabbix Agent
            transform_file_var ZABBIX_SERVER

            case "${ZABBIX_AGENT_TYPE,,}" in
                "classic" | "1" )
                    print_debug "Configuring classic Zabbix Agent"

                    # Create configuration file for classic agent
                    cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
# Zabbix Agent Configuration - Classic Version
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

AllowKey=system.run[${ZABBIX_REMOTECOMMANDS_ALLOW}]
AllowRoot=${ZABBIX_ALLOW_ROOT}
BufferSend=${ZABBIX_BUFFER_SEND}
BufferSize=${ZABBIX_BUFFER_SIZE}
DebugLevel=${ZABBIX_DEBUGLEVEL}
Hostname=${ZABBIX_HOSTNAME}
ListenIP=${ZABBIX_LISTEN_IP}
ListenPort=${ZABBIX_LISTEN_PORT}
LogFile=${ZABBIX_AGENT_LOG_PATH}/${ZABBIX_AGENT_LOG_FILE}
LogFileSize=${ZABBIX_LOG_FILE_SIZE}
LogRemoteCommands=${ZABBIX_REMOTECOMMANDS_LOG}
MaxLinesPerSecond=${ZABBIX_MAXLINES_SECOND}
Timeout=${ZABBIX_AGENT_TIMEOUT}
PidFile=${ZABBIX_PID}
RefreshActiveChecks=${ZABBIX_REFRESH_ACTIVE_CHECKS}
Server=${ZABBIX_SERVER}
ServerActive=${ZABBIX_SERVER_ACTIVE}
StartAgents=${ZABBIX_START_AGENTS}
User=${ZABBIX_USER}
${tls_psk}
Include=${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/*.conf
EOF
                ;;
                "modern" | "2" )
                    print_debug "Configuring modern Zabbix Agent"

                    # Create configuration file for modern agent
                    cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
# Zabbix Agent Configuration - Modern Version
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

AllowKey=system.run[${ZABBIX_REMOTECOMMANDS_ALLOW}]
BufferSend=${ZABBIX_BUFFER_SEND}
BufferSize=${ZABBIX_BUFFER_SIZE}
ControlSocket=${ZABBIX_SOCKET}
DebugLevel=${ZABBIX_DEBUGLEVEL}
Hostname=${ZABBIX_HOSTNAME}
ListenPort=${ZABBIX_LISTEN_PORT}
LogFile=${ZABBIX_AGENT_LOG_PATH}/${ZABBIX_AGENT_LOG_FILE}
LogFileSize=${ZABBIX_LOG_FILE_SIZE}
RefreshActiveChecks=${ZABBIX_REFRESH_ACTIVE_CHECKS}
Server=${ZABBIX_SERVER}
ServerActive=${ZABBIX_SERVER_ACTIVE}
StatusPort=${ZABBIX_STATUS_PORT}
Timeout=${ZABBIX_AGENT_TIMEOUT}
PidFile=${ZABBIX_PID}
${tls_psk}
Include=${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/*.conf
EOF
                ;;
            esac

            # Generate additional configuration for the agent
            mkdir -p "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}".d
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}".d/tiredofit-container_agent.conf
# Zabbix Container Agent Configuration
UserParameter=agent.os,grep "PRETTY_NAME" /etc/os-release | cut -d '"' -f2
EOF

            # Set permissions for Zabbix directories
            mkdir -p "${ZABBIX_AGENT_LOG_PATH}"
            chown -R "${ZABBIX_USER}":root "${ZABBIX_AGENT_LOG_PATH}"
            chown -R "${ZABBIX_USER}":root "${ZABBIX_CONFIG_PATH}"
            chmod 775 "${ZABBIX_CONFIG_PATH}"

            # Create logrotate configuration for Zabbix
            create_logrotate zabbix-agent "${ZABBIX_AGENT_LOG_PATH}"/"${ZABBIX_AGENT_LOG_FILE}" zabbix-agent-modern "${ZABBIX_USER}" root
            print_notice "Monitoring configured with '${CONTAINER_MONITORING_BACKEND}'"
            ;;
        * )
            print_error "Unknown Monitoring Backend"
            exit 1
            ;;
    esac
else
    service_stop "$(basename "$0")"
fi

# Finalize setup and re-enable output
liftoff
output_on

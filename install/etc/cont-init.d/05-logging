#!/command/with-contenv bash

### Load necessary functions
source /assets/functions/00-container

### Disable verbose output for cleaner logs
output_off

### Prepare service initialization
prepare_service

# Set process name for logging
PROCESS_NAME="logging"

### Enable log rotation if configured
if var_true "${CONTAINER_ENABLE_LOGROTATE}" ; then
    print_debug "Enabling log rotation"

    ### Define log rotation compression settings based on type
    case "${LOGROTATE_COMPRESSION_TYPE,,}" in
        bz* )
            logrotate_compression=$(cat <<EOF
compress
compresscmd $(which bzip2)
compressext .bz2
compressoptions -${LOGROTATE_COMPRESSION_VALUE} ${LOGROTATE_COMPRESSION_EXTRA_PARAMETERS}
EOF
            )
        ;;
        gz* )
            logrotate_compression=$(cat <<EOF
compress
compresscmd $(which gzip)
compressext .gz
compressoptions -${LOGROTATE_COMPRESSION_VALUE} ${LOGROTATE_COMPRESSION_EXTRA_PARAMETERS}
EOF
            )
        ;;
        none )
            logrotate_compression=""
        ;;
        zs* )
            logrotate_compression=$(cat <<EOF
compress
compresscmd $(which zstd)
compressext .zst
compressoptions -${LOGROTATE_COMPRESSION_VALUE} ${LOGROTATE_COMPRESSION_EXTRA_PARAMETERS}
EOF
            )
        ;;
    esac

    ### Generate logrotate configuration file
    cat <<EOF > /etc/logrotate.conf
daily
rotate ${LOGROTATE_RETAIN_DAYS}
copytruncate
dateext
nomail
notifempty
${logrotate_compression}
include /etc/logrotate.d
EOF

    chmod 0744 /etc/logrotate.conf

    ### Schedule logrotate in crontab
    mkdir -p "${CONTAINER_SCHEDULING_LOCATION}"
    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/logrotate"
# Logrotate schedule - hardcoded during image initialization
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

59 23 * * * logrotate -f /etc/logrotate.conf >/dev/null 2>&1
EOF
fi

### Handle log shipping configuration
if var_false "${CONTAINER_ENABLE_LOGSHIPPING}" ; then
    print_debug "Log shipping disabled"
    service_stop "$(basename "$0")"
else
    ### Configure based on log shipping backend
    case "${CONTAINER_LOGSHIPPING_BACKEND,,}" in
        "fluent-bit" | "fluentbit" )
            print_debug "[logship] Configuring Fluent-Bit log shipper"

            ### Ensure required directories exist
            mkdir -p "${FLUENTBIT_STORAGE_PATH}" "${FLUENTBIT_LOG_PATH}" /etc/fluent-bit/conf.d

            ### Generate base Fluent-Bit configuration
            cat <<EOF > /etc/fluent-bit/conf.d/do_not_delete.conf
# Placeholder configuration file to prevent Fluent-Bit startup failures
[INPUT]
    Name   dummy
    Tag    ignore

[OUTPUT]
    Name   NULL
    Match  ignore
EOF

            ### Generate Fluent-Bit service configuration
            cat <<EOF > /etc/fluent-bit/fluent-bit.conf
## Generated Fluent-Bit configuration
## Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

@INCLUDE conf.d/*.conf

[SERVICE]
    daemon       Off
    flush        ${FLUENTBIT_FLUSH_SECONDS}
    grace        ${FLUENTBIT_GRACE_SECONDS}
    http_listen  ${FLUENTBIT_HTTP_LISTEN_IP}
    http_port    ${FLUENTBIT_HTTP_LISTEN_PORT}
    http_server  ${FLUENTBIT_ENABLE_HTTP_SERVER}
    log_file     ${FLUENTBIT_LOG_PATH}/${FLUENTBIT_LOG_FILE}
    log_level    ${FLUENTBIT_LOG_LEVEL}
    storage.path ${FLUENTBIT_STORAGE_PATH}
EOF

            ### Configure Fluent-Bit input plugins for log files
            logshipenv=$(mktemp)
            set | grep -E '^LOGSHIP_' | sed "s|LOGSHIP_||g" > "${logshipenv}"

            while IFS= read -r logship_entry; do
                logship_title=$(echo "${logship_entry}" | cut -d = -f1 | tr '[:upper:]' '[:lower:]')
                logship_value=$(echo "${logship_entry}" | cut -d = -f2 | sed 's/^"\|"$//g')

                if var_true "${FLUENTBIT_TAIL_DB_ENABLE}" ; then
                    tail_db=$(cat <<EOF
    DB                $(dirname "${logship_value}")/.$(basename "${logship_value}").db
    DB.sync           ${FLUENTBIT_TAIL_DB_SYNC}
    DB.locking        ${FLUENTBIT_TAIL_DB_LOCK}
EOF
                    )
                fi

                ### Generate input configuration for each log file
                cat <<EOF > "/etc/fluent-bit/conf.d/in_tail_${logship_title,,}.conf"
[INPUT]
    Name              tail
    Path              ${logship_value}
    Tag               ${logship_title,,}
    Buffer_Chunk_Size ${FLUENTBIT_TAIL_BUFFER_CHUNK_SIZE}
    Buffer_Max_Size   ${FLUENTBIT_TAIL_BUFFER_MAX_SIZE}
    Read_from_Head    ${FLUENTBIT_TAIL_READ_FROM_HEAD}
    Skip_Empty_Lines  ${FLUENTBIT_TAIL_SKIP_EMPTY_LINES}
${tail_db}
EOF
            done < "${logshipenv}"

            rm -f "${logshipenv}"
            ;;
        *)
            print_error "[logship] Unknown log shipping backend"
            exit 1
            ;;
    esac
fi

# Finalize setup and re-enable output
liftoff
output_on

#!/command/with-contenv bash

### Load container functions
source /assets/functions/00-container

### Disable verbose output for cleaner logs
output_off

### Prepare service initialization
prepare_service

# Set process name for firewall and fail2ban service
# shellcheck disable=SC2034
PROCESS_NAME="firewall"

### Define firewall command
firewall_command=$(which "${CONTAINER_FIREWALL_BACKEND,,}")

### Firewall configuration
if var_true "${CONTAINER_ENABLE_FIREWALL}" ; then
    print_notice "Container configured for firewall with '${CONTAINER_FIREWALL_BACKEND}'"

    case "${CONTAINER_FIREWALL_BACKEND,,}" in
        "iptables" )
            ### Load custom iptables rules if available
            if [ -f "${IPTABLES_RULES_PATH}/${IPTABLES_RULES_FILE}" ]; then
                print_notice "Found custom iptables.rules file"
                silent iptables-restore "${IPTABLES_RULES_PATH}/${IPTABLES_RULES_FILE}"
            fi
        ;;
        *)
            print_error "Unknown firewall backend: ${CONTAINER_FIREWALL_BACKEND}"
            exit 1
        ;;
    esac

    ### Process firewall rules from environment variables
    set -o posix
    set -f
    if printenv | grep -q "^FIREWALL_RULE" ; then
        print_debug "Found FIREWALL_RULE environment variables"
        firewallenv=$(mktemp)
        printenv | sort | grep '^FIREWALL_RULE_[0-9][0-9]*' | sed "s|FIREWALL_RULE_||g" > "${firewallenv}"

        while IFS= read -r firewall_entry; do
            rule_number="$(echo ${firewall_entry} | cut -d = -f1)"
            rule_value="$(echo ${firewall_entry} | cut -d = -f2)"
            print_debug "Adding Rule Number: ${rule_number} for backend: ${CONTAINER_FIREWALL_BACKEND}"
            silent "${firewall_command}" ${rule_value}
        done < "${firewallenv}"

        rm -rf "${firewallenv}"
        unset rule_number rule_value
        unset "${!FIREWALL_RULE_RULE_@}"
    fi
    set +f

    ### Fail2ban configuration
    if var_true "${CONTAINER_ENABLE_FAIL2BAN}" ; then
        print_notice "Container configured to block hosts via 'fail2ban'"

        ### Configure logging for Fail2ban
        mkdir -p "${FAIL2BAN_LOG_PATH}"
        touch "${FAIL2BAN_LOG_PATH}/${FAIL2BAN_LOG_FILE}"
        create_logrotate fail2ban "${FAIL2BAN_LOG_PATH}/${FAIL2BAN_LOG_FILE}" none

        ### Configure filesystem and data directories
        if [ "${FAIL2BAN_CONFIG_PATH}" != "/etc/fail2ban/" ]; then
            print_debug "Fail2ban: Linking configuration to persistent storage"
            mkdir -p "${FAIL2BAN_CONFIG_PATH}"
            silent cp -R /etc/fail2ban/* "${FAIL2BAN_CONFIG_PATH}"
            rm -rf /etc/fail2ban
            ln -sf "${FAIL2BAN_CONFIG_PATH}" /etc/fail2ban
        fi

        mkdir -p /etc/fail2ban/{filter.d,jail.d}
        case "${FAIL2BAN_DB_TYPE,,}" in
            file ) fail2ban_db="${FAIL2BAN_DB_PATH}/${FAIL2BAN_DB_FILE}" ;;
            memory ) fail2ban_db=":memory:" ;;
            none ) fail2ban_db="None" ;;
        esac

        ### Generate default jail.conf
        cat <<EOF > "${FAIL2BAN_CONFIG_PATH}/jail.conf"
## Custom Generated Fail2ban jail.conf Configuration
## Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[DEFAULT]
ignorself = ${FAIL2BAN_IGNORE_SELF}
ignoreip = ${FAIL2BAN_IGNORE_IP}
bantime = ${FAIL2BAN_TIME_BAN}
findtime = ${FAIL2BAN_TIME_FIND}
maxretry = ${FAIL2BAN_MAX_RETRY}
backend = ${FAIL2BAN_BACKEND}
EOF

        ### Generate main fail2ban.conf
        cat <<EOF > "${FAIL2BAN_CONFIG_PATH}/fail2ban.conf"
## Custom Generated Fail2ban Configuration
## Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[Definition]
loglevel = ${FAIL2BAN_LOG_LEVEL}
logtarget = ${FAIL2BAN_LOG_PATH}/${FAIL2BAN_LOG_FILE}
syslogsocket = auto
socket = /var/run/fail2ban/fail2ban.sock
pidfile = /var/run/fail2ban/fail2ban.pid
dbfile = ${fail2ban_db}
dbpurgeage = ${FAIL2BAN_DB_PURGE_AGE}
EOF

        ### Substitute environment variables in jail.d/*.conf if applicable
        if [ -d "${FAIL2BAN_CONFIG_PATH}/jail.d" ] && dir_notempty "${FAIL2BAN_CONFIG_PATH}/jail.d" ; then
            for fail2ban_file in "${FAIL2BAN_CONFIG_PATH}/jail.d/"*.conf; do
                print_debug "Substituting environment variables in: ${fail2ban_file}"
                fail2ban_tmpfile=$(mktemp)
                envsubst < "${fail2ban_file}" > "${fail2ban_tmpfile}" && mv "${fail2ban_tmpfile}" "${fail2ban_file}"
            done
        fi

        ### Add Zabbix monitoring configuration if enabled
        if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
            cat <<EOF > "${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/tiredofit-fail2ban.conf"
# Zabbix Fail2ban Configuration - Auto-generated
UserParameter=fail2ban.status[*],fail2ban-client status '$1' | grep 'Currently banned:' | grep -E -o '[0-9]+'
EOF
        fi
    else
        print_debug "Fail2ban is disabled"
    fi
else
    print_debug "Firewall is disabled"
    service_stop "$(basename "$0")"
fi

### Finalize setup and re-enable output
liftoff
output_on

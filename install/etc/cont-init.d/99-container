#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Final Initialization Script
#
# Purpose: Final validation and service startup for container initialization
# Context: Runs in s6-overlay environment as the LAST script in cont-init.d sequence
# Note: This is script 99-container - runs after ALL other initialization scripts
#
# Key Functions:
# 1. Sanity Check: Verify all initialization scripts completed successfully
# 2. Service Management: Enable services based on initialization status
# 3. Post-Init Execution: Run custom scripts and commands after initialization
# 4. Error Reporting: Provide detailed failure information with debugging guidance
#
# Environment Variables:
# - CONTAINER_SKIP_SANITY_CHECK: Skip initialization completion validation
# - IMAGE_NAME: Container image name for version detection and support info
# - IMAGE_REPO_URL: Repository URL for support and issue reporting
# - CONTAINER_POST_INIT_SCRIPT: Comma-separated list of scripts to execute
# - CONTAINER_POST_INIT_COMMAND: Comma-separated list of commands to execute
#
# File Locations:
# - /etc/cont-init.d/: Directory containing initialization scripts
# - /tmp/.container/*-init: Completion markers for each initialization script
# - /etc/services.available/: Available services for the container
# - /etc/services.d/: Active services directory (symlinks to available services)
# - /assets/.changelogs/: Version and changelog information files
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# INITIALIZATION
#-----------------------------------------------------------------------------
# Load container defaults and functions library
source /assets/defaults/00-container
source /assets/functions/00-container
output_off
PROCESS_NAME="container"

#-----------------------------------------------------------------------------
# INITIALIZATION SANITY CHECK
#-----------------------------------------------------------------------------
# Verify all initialization scripts completed successfully (unless explicitly skipped)
if var_false "${CONTAINER_SKIP_SANITY_CHECK}" ; then

  #---------------------------------------------------------------------------
  # COLLECT INITIALIZATION SCRIPT INFORMATION
  #---------------------------------------------------------------------------
  # Count total initialization scripts (excluding this final script)
  files_init=$(find /etc/cont-init.d/ -maxdepth 1 -type f | wc -l)
  files_init=$(( $files_init-1 ))

  # Build array of initialization script names
  declare -a files_init_name
  declare -a length_of_files_init_name
  for f in /etc/cont-init.d/*; do
    files_init_name[length_of_files_init_name + 1]=filename
    # Extract script name: remove path prefix and exclude this final script
    files_init_name[${#files_init_name[@]}+1]=$(echo "$f" | sed "s#filename##g" | sed "s#/etc/cont-init.d/##g" | sed "s#99-container##g" );
  done

  #---------------------------------------------------------------------------
  # COLLECT COMPLETION MARKER INFORMATION
  #---------------------------------------------------------------------------
  # Count completion markers (files created by successful script execution)
  init_complete=$(find /tmp/.container/*-init -maxdepth 1 -type f | wc -l)

  # Build array of completed script names
  declare -a init_complete_name
  declare -a length_of_init_complete_name
  for f in /tmp/.container/*-init; do
    init_complete_name[length_of_init_complete_name + 1]=filename
    # Extract script name: remove path prefix and -init suffix
    init_complete_name[${#init_complete_name[@]}+1]=$(echo "$f" | sed "s#filename##g" | sed "s#/tmp/.container/##g" | sed "s#-init##g");
  done

  #---------------------------------------------------------------------------
  # IDENTIFY UNINITIALIZED SCRIPTS
  #---------------------------------------------------------------------------
  # Compare initialization scripts against completion markers to find failures
  uninitialized_scripts=()
  for i in "${files_init_name[@]}"; do
    skip=
    for j in "${init_complete_name[@]}"; do
      # Note: Using [[ ]] for string comparison (bash-specific but functional in this environment)
      [[ $i == "$j" ]] && { skip=1; break; }
    done
    [[ -n $skip ]] || uninitialized_scripts+=("$i")
  done
  declare uninitialized_scripts

  #---------------------------------------------------------------------------
  # VALIDATION AND ERROR REPORTING
  #---------------------------------------------------------------------------
  # Check if initialization script count matches completion marker count
  if [ $files_init != "$init_complete" ]; then
    if [ "$init_complete" -gt "$files_init" ] ; then
      # More completion markers than scripts - unusual but not critical
      :  # No-op: continue execution
    else
      # Missing completion markers - critical error requiring detailed reporting

      # Gather image version and support information for error display
      if [ -n "${IMAGE_NAME}" ] ; then
        # Try multiple changelog file naming patterns for version detection
        if [ -f "/assets/.changelogs/${IMAGE_NAME/\//_}.md" ] ; then
          image_version=$(head -n1 /assets/.changelogs/"${IMAGE_NAME/\//_}".md | awk '{print $2}')
        elif [ -f /assets/.changelogs/docker-"${IMAGE_NAME/\//_}".md ] ; then
          image_version=$(head -n1 /assets/.changelogs/docker-"${IMAGE_NAME/\//_}".md | awk '{print $2}')
        else
          if [ -f /assets/.changelogs/focela_docker-"${IMAGE_NAME/\//_}".md ] ; then
            image_version=$(head -n1 /assets/.changelogs/focela_docker-"${IMAGE_NAME/\//_}".md | awk '{print $2}')
          fi
        fi

        # Build image information string
        image_string="Image: ${IMAGE_NAME}"

        if [ -n "${image_version}" ] ; then
          image_string="${image_string} | Version ${image_version} Type 'changelog' for details"
        fi

        image_string="${image_string}"

        # Add repository URL if available
        if [ -n "${IMAGE_REPO_URL}" ] ; then
          image_url="Repository/Issues/Support: ${IMAGE_REPO_URL}"
        fi
      fi

      # Display comprehensive error message with failed scripts and support information
      echo "**********************************************************************************************************************"
      echo "**********************************************************************************************************************"
      echo "****                                                                                                              ****"
      echo "****       ERROR - Some initialization scripts haven't completed - All services are now halted                    ****"
      echo "****             - The following scripts in '/etc/cont-init.d' did not pass their completion check                ****"
      echo "****                                                                                                              ****"
      echo "**********************************************************************************************************************"
      echo "**********************************************************************************************************************"
      echo ""
      echo "${uninitialized_scripts[@]}" | tr ' ' '\n' | uniq -u
      echo ""
      echo "**********************************************************************************************************************"
      echo "**********************************************************************************************************************"
      echo "****                                                                                                              ****"
      echo "****       This could have happened for a variety of reasons. Please make sure you have followed the README       ****"
      echo "****       relating to this image and have proper configuration such as environment variables and volumes set     ****"
      echo "****                                                                                                              ****"
      echo "****       If you feel that you have encountered a bug, please submit an issue on the revision control system     ****"
      echo "****       and provide full debug logs by setting the environment variable 'DEBUG_MODE=TRUE'                      ****"
      echo "****                                                                                                              ****"
      echo "**********************************************************************************************************************"
      echo "**********************************************************************************************************************"
      echo ""
      echo "$image_string"
      echo "$image_url"
      exit 1
    fi
  fi
  output_on
fi

#-----------------------------------------------------------------------------
# SERVICE MANAGEMENT SETUP
#-----------------------------------------------------------------------------
# Enable services based on initialization script completion status
for services in /etc/services.available/*/
do
  # Remove trailing slash to get service directory path
  service=${services%*/}

  # Check if service has corresponding initialization completion marker
  if [ -f "/tmp/.container/${service##*/}-init" ]; then
    # Service has initialization script - check if it should be started
    if grep -q "DONOTSTART" "/tmp/.container/${service##*/}-init"; then
      print_debug "Skipping '${service##*/}' service for startup routines"
    else
      print_debug "Getting ready to start '${service##*/}' service"
      # Create symlink to enable service in s6-overlay
      ln -sf "${service}" /etc/services.d
    fi
  else
    # No initialization script found - assume service should start
    print_debug "No Initialization Script Found - Getting ready to start '${service##*/}' service"
    # Create symlink to enable service in s6-overlay
    ln -sf "${service}" /etc/services.d
  fi
done

#-----------------------------------------------------------------------------
# POST-INITIALIZATION SCRIPT EXECUTION
#-----------------------------------------------------------------------------
# Execute custom scripts after all initialization is complete
if [ -n "${CONTAINER_POST_INIT_SCRIPT}" ] ; then
  print_debug "Found Post Init Scripts"

  # Parse comma-separated list of scripts
  post_scripts=$(echo "${CONTAINER_POST_INIT_SCRIPT}" | tr "," "\n")
  for post_script in $post_scripts
  do
    if [ -f "${post_script}" ] ; then
      print_debug "Executing post init script '${post_script}'"
      chmod +x "${post_script}"
      "${post_script}"
    else
      print_error "Tried to run post script '${post_script}' but it does not exist!"
    fi
  done
fi

#-----------------------------------------------------------------------------
# POST-INITIALIZATION COMMAND EXECUTION
#-----------------------------------------------------------------------------
# Execute custom commands after all initialization is complete
if [ -n "${CONTAINER_POST_INIT_COMMAND}" ] ; then
  print_debug "Found Post Init Command"

  # Parse comma-separated list of commands
  post_commands=$(echo "${CONTAINER_POST_INIT_COMMAND}" | tr "," "\n")
  for post_command in "${post_commands}"
  do
    print_debug "Executing post init command '${post_command}'"
    # Use eval to execute command with variable expansion
    eval "${post_command}"
  done
fi

#-----------------------------------------------------------------------------
# FINAL COMPLETION
#-----------------------------------------------------------------------------
# Mark final initialization complete and restore output
liftoff
output_on

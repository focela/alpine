#!/command/with-contenv bash

### Import default and utility functions
source /assets/defaults/00-container
source /assets/functions/00-container

### Disable verbose output
output_off

### Set process name for debugging
PROCESS_NAME="container"

### Sanity check: Ensure all initialization scripts are executed successfully
if var_false "${CONTAINER_SKIP_SANITY_CHECK}" ; then

    ### Find all initialization scripts in /etc/cont-init.d
    total_scripts=$(find /etc/cont-init.d/ -maxdepth 1 -type f | wc -l)
    total_scripts=$(( total_scripts - 1 )) # Exclude the current script
    scripts_in_dir=()
    for script in /etc/cont-init.d/*; do
        script_name=$(basename "$script" | sed "s/99-container//g")
        scripts_in_dir+=("$script_name")
    done

    ### Find completed scripts in /tmp/.container
    completed_scripts=()
    for completed in /tmp/.container/*-init; do
        completed_name=$(basename "$completed" | sed "s/-init//g")
        completed_scripts+=("$completed_name")
    done

    ### Compare completed scripts with total scripts
    uninitialized_scripts=()
    for script in "${scripts_in_dir[@]}"; do
        if ! [[ " ${completed_scripts[@]} " =~ " ${script} " ]]; then
            uninitialized_scripts+=("$script")
        fi
    done

    ### Handle uninitialized scripts
    if [ "$total_scripts" -ne "${#completed_scripts[@]}" ]; then
        echo "**********************************************************************************************************************"
        echo "**** ERROR: Some initialization scripts did not complete successfully. Services are halted.                         ****"
        echo "**** The following scripts did not pass their completion check:                                                     ****"
        echo "**********************************************************************************************************************"
        for script in "${uninitialized_scripts[@]}"; do
            echo "$script"
        done
        echo "**********************************************************************************************************************"
        echo "**** Please ensure your configuration (environment variables, volumes, etc.) is correct. Refer to the README.      ****"
        echo "**********************************************************************************************************************"

        ### Print image information
        if [ -n "${IMAGE_NAME}" ]; then
            echo "Image: ${IMAGE_NAME}"
            if [ -n "${IMAGE_REPO_URL}" ]; then
                echo "Repository/Issues: ${IMAGE_REPO_URL}"
            fi
        fi
        exit 1
    fi

fi

### Link available services in /etc/services.available to /etc/services.d
for service_path in /etc/services.available/*/; do
    service_name=$(basename "${service_path%*/}")
    if [ -f "/tmp/.container/${service_name}-init" ]; then
        if grep -q "DONOTSTART" "/tmp/.container/${service_name}-init"; then
            print_debug "Skipping '${service_name}' service for startup routines"
        else
            print_debug "Starting '${service_name}' service"
            ln -sf "${service_path}" /etc/services.d
        fi
    else
        print_debug "No initialization script found for '${service_name}', starting service"
        ln -sf "${service_path}" /etc/services.d
    fi
done

### Execute post-initialization scripts
if [ -n "${CONTAINER_POST_INIT_SCRIPT}" ]; then
    print_debug "Executing post-initialization scripts"
    post_scripts=$(echo "${CONTAINER_POST_INIT_SCRIPT}" | tr "," "\n")
    for post_script in $post_scripts; do
        if [ -f "${post_script}" ]; then
            print_debug "Executing script: '${post_script}'"
            chmod +x "${post_script}"
            "${post_script}"
        else
            print_error "Post-initialization script not found: '${post_script}'"
        fi
    done
fi

### Execute post-initialization commands
if [ -n "${CONTAINER_POST_INIT_COMMAND}" ]; then
    print_debug "Executing post-initialization commands"
    post_commands=$(echo "${CONTAINER_POST_INIT_COMMAND}" | tr "," "\n")
    for post_command in $post_commands; do
        print_debug "Executing command: '${post_command}'"
        eval "${post_command}"
    done
fi

### Finalize container initialization
liftoff
output_on

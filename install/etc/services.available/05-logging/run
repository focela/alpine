#!/command/with-contenv bash

# Load container functions and initialize process name
source /assets/functions/00-container
output_off
PROCESS_NAME="logging"

# Prepare the service environment and validate initialization
prepare_service defaults single
check_container_initialized
check_service_initialized init

# Wait for the scheduling service to start if enabled
if var_true "${CONTAINER_ENABLE_SCHEDULING}" ; then
    print_debug "[logship] Waiting for Cron to start"
    while ! pgrep crond > /dev/null ; do
        sleep 1
    done
fi

liftoff

# Configure and start the logging backend based on the selected shipping backend
case "${CONTAINER_LOGSHIPPING_BACKEND,,}" in
    "fluent-bit" | "fluentbit" )
        ### Configuration setup for Fluent-Bit
        # Set key path if enabled
        if var_true "${FLUENTBIT_TAIL_KEY_PATH_ENABLE}" ; then
            tail_key_path="    Path_Key          ${FLUENTBIT_TAIL_KEY_PATH}"
        fi

        # Set offset key if enabled
        if var_true "${FLUENTBIT_TAIL_KEY_OFFSET_ENABLE}" ; then
            tail_key_offset="    Offset_Key        ${FLUENTBIT_TAIL_KEY_OFFSET}"
        fi

        # Set ignore older files setting
        if [ -n "${FLUENTBIT_TAIL_IGNORE_OLDER}" ] ; then
            tail_ignore_older="    Ignore_Older      ${FLUENTBIT_TAIL_IGNORE_OLDER}"
        fi

        # Configure boolean settings
        truefalse_onoff FLUENTBIT_TAIL_SKIP_EMPTY_LINES
        truefalse_onoff FLUENTBIT_TAIL_SKIP_LONG_LINES

        # Parse logrotate files for log shipping if enabled
        if var_true "${LOGSHIPPING_AUTO_CONFIG_LOGROTATE}" ; then
            print_debug "[logship] Parsing logrotate files for log shipping"
            mkdir -p /tmp/.container/logship/

            # Prevent duplicate parsing
            if [ ! -f "/tmp/.container/logship/logrotate" ]; then
                for logrotate_file in /etc/logrotate.d/* ; do
                    set -f
                    logrotate_paths=$(grep '{' "${logrotate_file}" | cut -d { -f 1 | xargs | tr " " "\n")

                    for logrotate_path in $logrotate_paths ; do
                        if ! grep -Fq "$logrotate_path" /etc/fluent-bit/conf.d/in_tail_*.conf >/dev/null 2>&1 ; then
                            if grep -Fq "# logship:" "${logrotate_file}" >/dev/null 2>&1 ; then
                                logrotate_parser=$(grep "# logship:" "${logrotate_file}" | cut -d : -f 2 | tr "," "\n" | xargs)

                                # Handle multiple parsers
                                if [ "$(echo "${logrotate_parser}" | wc -w)" -gt 1 ] ; then
                                    print_debug "[logship] Found multiple parsers in logrotate configuration"
                                    multiple_parsers=TRUE
                                    for multi_parser in $logrotate_parser; do
                                        multi_parsers=$(echo "${multi_parsers}" ; cat<<EOF
    Parser            ${multi_parser}
EOF
                                        )
                                    done
                                fi

                                # Skip or use specific parser based on logrotate configuration
                                case "$(echo "${logrotate_parser,,}" | awk '{print $1}')" in
                                    "skip" | "ignore" )
                                        print_debug "[logship] Skipping log shipping for '$(basename "${logrotate_file}")'"
                                        skip_processing=TRUE
                                    ;;
                                    * )
                                        print_debug "[logship] Using parser '${logrotate_parser}' for '$(basename "${logrotate_file}")'"
                                        logrotate_parser="    Parser            $(echo "${logrotate_parser}" | awk '{print $1}')"
                                    ;;
                                esac
                            fi

                            # Create Fluent-Bit input configuration if not skipped
                            if [ "${skip_processing}" != "TRUE" ]; then
                                print_debug "[logship] Creating log shipping entry for '${logrotate_path}'"
                                if var_true "${FLUENTBIT_TAIL_DB_ENABLE}" ; then
                                    tail_db=$(cat<<EOF
    DB                $(dirname ${logrotate_path})/.$(basename ${logrotate_path}).db
    DB.sync           ${FLUENTBIT_TAIL_DB_SYNC}
    DB.locking        ${FLUENTBIT_TAIL_DB_LOCK}
    DB.journal_mode   ${FLUENTBIT_TAIL_DB_JOURNAL_MODE}
EOF
                                    )
                                fi

                                cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"
# Auto-generated Fluent-Bit configuration for ${logrotate_file}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[INPUT]
    Name              tail
    Path              ${logrotate_path}
    Tag               $(basename "${logrotate_file,,}")
    Buffer_Chunk_Size ${FLUENTBIT_TAIL_BUFFER_CHUNK_SIZE}
    Buffer_Max_Size   ${FLUENTBIT_TAIL_BUFFER_MAX_SIZE}
    Read_from_Head    ${FLUENTBIT_TAIL_READ_FROM_HEAD}
    Skip_Empty_Lines  ${FLUENTBIT_TAIL_SKIP_EMPTY_LINES}
    Skip_Long_Lines   ${FLUENTBIT_TAIL_SKIP_LONG_LINES}
${tail_key_path}
${logrotate_parser}
${tail_db}
${tail_ignore_older}
${tail_key_offset}
EOF
                            fi
                        fi
                    done

                    # Add record modifier filter if missing
                    if ! grep -q 'record_modifier' "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf" ; then
                        cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"

[FILTER]
    Name record_modifier
    Match $(basename "${logrotate_file,,}")
    Record container_name ${CONTAINER_NAME}
    Record product $(basename "${logrotate_file,,}")
    Record hostname $(hostname)
EOF
                    fi

                    # Add multi-parser filter if applicable
                    if var_true "${multiple_parsers}" ; then
                        if ! grep -q 'Reserve_Data' "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf" ; then
                            cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"

[FILTER]
    Name            parser
    Match           $(basename "${logrotate_file,,}")
    Preserve_Key    Off
    Reserve_Data    On
    Key_Name        multilog
${multi_parsers}
EOF
                        fi
                    fi
                    unset multiple_parsers multi_parsers
                done

                sed -i "s|//|/|g" /etc/fluent-bit/conf.d/*.conf
                touch /tmp/.container/logship/logrotate
            fi
        fi

        # Start Fluent-Bit
        print_start "[logship] Starting Fluent-Bit ${FLUENTBIT_VERSION}"
        output_on
        silent exec fluent-bit -c /etc/fluent-bit/fluent-bit.conf
    ;;
esac

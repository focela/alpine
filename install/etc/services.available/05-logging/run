#!/command/with-contenv bash
#
# Logging service script
# Manages log shipping with Fluent Bit integration
#

#------------------------------------------------------------------------------------------
# INITIAL SETUP
#------------------------------------------------------------------------------------------
# Import container functions and initialize service
source /assets/functions/00-container
output_off
PROCESS_NAME="logging"
prepare_service defaults single
check_container_initialized
check_service_initialized init

#------------------------------------------------------------------------------------------
# INITIALIZATION
#------------------------------------------------------------------------------------------
# Wait for cron to start if scheduling is enabled
if var_true "${CONTAINER_ENABLE_SCHEDULING}"; then
    print_debug "[logship] Waiting for Cron to start"
    while ! pgrep crond > /dev/null; do
        sleep 1
    done
fi

# Mark initialization complete
liftoff

#------------------------------------------------------------------------------------------
# LOG SHIPPING SERVICE
#------------------------------------------------------------------------------------------
# Start the appropriate log shipping backend
case "${CONTAINER_LOGSHIPPING_BACKEND,,}" in
    "fluent-bit" | "fluentbit")
        #------------------------------------------------------------------------------------------
        # FLUENT-BIT CONFIGURATION
        #------------------------------------------------------------------------------------------
        # Configure Fluent Bit tail plugin options
        tail_key_path=""
        tail_key_offset=""
        tail_ignore_older=""

        if var_true "${FLUENTBIT_TAIL_KEY_PATH_ENABLE}"; then
            tail_key_path="    Path_Key          ${FLUENTBIT_TAIL_KEY_PATH}"
        fi

        if var_true "${FLUENTBIT_TAIL_KEY_OFFSET_ENABLE}"; then
            tail_key_offset="    Offset_Key        ${FLUENTBIT_TAIL_KEY_OFFSET}"
        fi

        if [ -n "${FLUENTBIT_TAIL_IGNORE_OLDER}" ]; then
            tail_ignore_older="    Ignore_Older      ${FLUENTBIT_TAIL_IGNORE_OLDER}"
        fi

        truefalse_onoff FLUENTBIT_TAIL_SKIP_EMPTY_LINES
        truefalse_onoff FLUENTBIT_TAIL_SKIP_LONG_LINES

        #------------------------------------------------------------------------------------------
        # LOGROTATE INTEGRATION
        #------------------------------------------------------------------------------------------
        # Create Fluent Bit configurations from logrotate files
        if var_true "${LOGSHIPPING_AUTO_CONFIG_LOGROTATE}"; then
            print_debug "[logship] Starting to parse logrotate files for log shipping"
            mkdir -p /tmp/.container/logship/

            if [ ! -f "/tmp/.container/logship/logrotate" ]; then
                for logrotate_file in /etc/logrotate.d/*; do
                    # Skip if not a file
                    [ ! -f "${logrotate_file}" ] && continue

                    set -f
                    # Extract log paths from logrotate file
                    logrotate_paths=$(grep '{' "${logrotate_file}" | cut -d '{' -f 1 | xargs | tr " " "\n")

                    for logrotate_path in $logrotate_paths; do
                        # Skip if this path is already configured
                        if ! grep -Fq "$logrotate_path" /etc/fluent-bit/conf.d/in_tail_*.conf >/dev/null 2>&1; then
                            skip_processing=FALSE
                            logrotate_parser=""
                            multiple_parsers=FALSE
                            multi_parsers=""

                            # Check for logship directive in logrotate file
                            if grep -Fq "# logship:" "${logrotate_file}" >/dev/null 2>&1; then
                                logrotate_parser=$(grep "# logship:" "${logrotate_file}" | cut -d ':' -f 2 | tr "," "\n" | xargs)

                                # Handle multiple parsers
                                if [ "$(echo "${logrotate_parser}" | wc -w)" -gt 1 ]; then
                                    print_debug "[logship] Found Multiple parsers in logrotate configuration"
                                    multiple_parsers=TRUE
                                    logrotate_parsers_full=${logrotate_parser}

                                    # Build multi-parser configuration
                                    for multi_parser in $logrotate_parsers_full; do
                                        multi_parsers="${multi_parsers}    Parser            ${multi_parser}
"
                                    done
                                fi

                                # Handle parser directives
                                case "$(echo "${logrotate_parser,,}" | awk '{print $1}')" in
                                    "skip" | "ignore")
                                        print_debug "[logship] Logrotate configuration is telling us to skip shipping logs for '$(basename "${logrotate_file}")'"
                                        skip_processing=TRUE
                                    ;;
                                    *)
                                        print_debug "[logship] Logrotate directed us to use the '${logrotate_parser}' parser for '$(basename "${logrotate_file}")'"
                                        logrotate_parser="    Parser            $(echo "${logrotate_parser}" | awk '{print $1}')"
                                    ;;
                                esac
                            fi

                            # Create Fluent Bit configuration for this log path
                            if [ "${skip_processing}" != "TRUE" ]; then
                                print_debug "[logship] Creating Log ship entry for '${logrotate_path}' to be parsed by '${CONTAINER_LOGSHIPPING_BACKEND}'"

                                # Configure database if enabled
                                tail_db=""
                                if var_true "${FLUENTBIT_TAIL_DB_ENABLE}"; then
                                    tail_db=$(cat<<EOF
    DB                $(dirname "${logrotate_path}")/.$(basename "${logrotate_path}").db
    DB.sync           ${FLUENTBIT_TAIL_DB_SYNC}
    DB.locking        ${FLUENTBIT_TAIL_DB_LOCK}
    DB.journal_mode   ${FLUENTBIT_TAIL_DB_JOURNAL_MODE}
EOF
                                    )
                                fi

                                # Create input configuration
                                cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"
# Log File Shipping created automatically generated by reading ${logrotate_file}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[INPUT]
    Name              tail
    Path              ${logrotate_path}
    Tag               $(basename "${logrotate_file,,}")
    Buffer_Chunk_Size ${FLUENTBIT_TAIL_BUFFER_CHUNK_SIZE}
    Buffer_Max_Size   ${FLUENTBIT_TAIL_BUFFER_MAX_SIZE}
    Read_from_Head    ${FLUENTBIT_TAIL_READ_FROM_HEAD}
    Skip_Empty_Lines  ${FLUENTBIT_TAIL_SKIP_EMPTY_LINES}
    Skip_Long_Lines   ${FLUENTBIT_TAIL_SKIP_LONG_LINES}
${tail_key_path}
${logrotate_parser}
${tail_db}
${tail_ignore_older}
${tail_key_offset}
EOF
                            fi
                        fi
                    done
                    set +f

                    # Add record modifier filter if not already present
                    if [ -f "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf" ] && \
                       ! grep -q 'record_modifier' "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"; then
                        cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"

[FILTER]
    Name record_modifier
    Match $(basename "${logrotate_file,,}")
    Record container_name ${CONTAINER_NAME}
    Record product $(basename "${logrotate_file,,}")
    Record hostname $(hostname)
EOF
                    fi

                    # Add parser filter for multiple parsers if needed
                    if var_true "${multiple_parsers}" && \
                       [ -f "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf" ] && \
                       ! grep -q 'Reserve_Data' "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"; then
                        cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"

[FILTER]
    Name            parser
    Match           $(basename "${logrotate_file,,}")
    Preserve_Key    Off
    Reserve_Data    On
    Key_Name        multilog
${multi_parsers}
EOF
                    fi

                    # Reset variables for next iteration
                    unset logrotate_parsers_full
                    unset multiple_parsers
                    unset multi_parsers
                done

                # Fix any double slashes in paths
                sed -i "s|//|/|g" /etc/fluent-bit/conf.d/*.conf
                touch /tmp/.container/logship/logrotate
            fi
        fi

        #------------------------------------------------------------------------------------------
        # FLUENT-BIT SERVICE STARTUP
        #------------------------------------------------------------------------------------------
        # Start Fluent Bit service
        print_start "[logship] Starting fluent-bit ${FLUENTBIT_VERSION}"
        output_on
        silent exec fluent-bit -c /etc/fluent-bit/fluent-bit.conf
    ;;
esac

#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Logging Service Script
#
# Purpose: Initialize and run container log shipping services (fluent-bit)
# Context: Runs as s6-overlay service for centralized log collection and shipping
# Note: Features auto-configuration from logrotate files and multiple parser support
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# INITIALIZATION
#-----------------------------------------------------------------------------
# Load container functions and initialize logging service
source /assets/functions/00-container
output_off
PROCESS_NAME="logging"
prepare_service defaults single
check_container_initialized
check_service_initialized init

#-----------------------------------------------------------------------------
# SERVICE DEPENDENCY MANAGEMENT
#-----------------------------------------------------------------------------
# Wait for scheduling service (cron) to be ready if enabled
# This ensures proper service startup order for log shipping coordination
if var_true "${CONTAINER_ENABLE_SCHEDULING}" ; then
  print_debug "[logship] Waiting for Cron to start"
  counter=0
  # Poll for crond process until it's available
  while ! pgrep crond > /dev/null ; do
    sleep 1
  done
fi

liftoff

#-----------------------------------------------------------------------------
# LOG SHIPPING BACKEND SELECTION
#-----------------------------------------------------------------------------
# Determine which log shipping backend to use based on configuration
case "${CONTAINER_LOGSHIPPING_BACKEND,,}" in
  "fluent-bit" | "fluentbit" )

    #-------------------------------------------------------------------------
    # FLUENT-BIT CONFIGURATION SETUP
    #-------------------------------------------------------------------------
    # Configure optional fluent-bit tail input parameters

    # Enable path key tracking for log file identification
    if var_true "${FLUENTBIT_TAIL_KEY_PATH_ENABLE}" ; then
      tail_key_path="    Path_Key          ${FLUENTBIT_TAIL_KEY_PATH}"
    fi

    # Enable offset key tracking for log position management
    if var_true "${FLUENTBIT_TAIL_KEY_OFFSET_ENABLE}" ; then
      tail_key_offset="    Offset_Key        ${FLUENTBIT_TAIL_KEY_OFFSET}"
    fi

    # Configure ignore older logs threshold to prevent processing old entries
    if [ -n "${FLUENTBIT_TAIL_IGNORE_OLDER}" ] ; then
      tail_ignore_older="    Ignore_Older      ${FLUENTBIT_TAIL_IGNORE_OLDER}"
    fi

    # Convert boolean environment variables to fluent-bit on/off format
    truefalse_onoff FLUENTBIT_TAIL_SKIP_EMPTY_LINES
    truefalse_onoff FLUENTBIT_TAIL_SKIP_LONG_LINES

    #-------------------------------------------------------------------------
    # LOGROTATE AUTO-CONFIGURATION
    #-------------------------------------------------------------------------
    # Automatically configure fluent-bit inputs based on logrotate configurations
    # This creates tail inputs for each log file managed by logrotate
    if var_true "${LOGSHIPPING_AUTO_CONFIG_LOGROTATE}" ; then
      print_debug "[logship] Starting to parse logrotate files for log shipping"

      # Create temporary directory for auto-configuration tracking
      mkdir -p /tmp/.container/logship/

      # Only run auto-configuration once (check for marker file)
      if [ ! -f "/tmp/.container/logship/logrotate" ]; then

        # Process each logrotate configuration file
        for logrotate_file in /etc/logrotate.d/* ; do
          set -f

          # Extract log file paths from logrotate configuration
          # Look for lines with '{' and extract paths before the brace
          logrotate_paths=$(grep '{' "${logrotate_file}" | cut -d { -f 1 | xargs | tr " " "\n" ; )

          # Process each log path found in the logrotate file
          for logrotate_path in $logrotate_paths ; do

            # Skip if this path is already configured in existing fluent-bit configs
            if ! grep -Fq "$logrotate_path" /etc/fluent-bit/conf.d/in_tail_*.conf >/dev/null 2>&1 ; then

              #---------------------------------------------------------------
              # PARSER CONFIGURATION FROM LOGROTATE COMMENTS
              #---------------------------------------------------------------
              # Check for parser directives in logrotate file comments
              # Format: "# logship: parser_name" or "# logship: parser1,parser2"
              if grep -Fq "# logship:" "${logrotate_file}" >/dev/null 2>&1 ; then
                # Extract parser configuration from comment
                logrotate_parser=$(grep "# logship:" "${logrotate_file}" | cut -d : -f 2 | tr "," "\n" | xargs)

                # Handle multiple parsers if specified
                if [ "$(echo "${logrotate_parser}" | wc -w)" -gt 1 ] ; then
                  print_debug "[logship] Found Multiple parsers in logrotate configuration"
                  multiple_parsers=TRUE
                  logrotate_parsers_full=${logrotate_parser}

                  # Build multi-parser configuration block
                  for multi_parser in $logrotate_parsers_full; do
                    multi_parsers=$(echo "${multi_parsers}" ; cat<<EOF
    Parser            ${multi_parser}
EOF
                    )
                  done
                fi

                # Handle special parser directives
                case "$(echo "${logrotate_parser,,}" | awk '{print $1}')" in
                  "skip" | "ignore" )
                    print_debug "[logship] Logrotate configuration is telling us to skip shipping logs for '$(basename "${logrotate_file}")'"
                    skip_processing=TRUE
                  ;;
                  * )
                    print_debug "[logship] Logrotate directed us to use the '${logrotate_parser}' parser for '$(basename "${logrotate_file}")'"
                    logrotate_parser="    Parser            $(echo "${logrotate_parser}" | awk '{print $1}')"
                  ;;
                esac
              fi

              #---------------------------------------------------------------
              # FLUENT-BIT CONFIGURATION GENERATION
              #---------------------------------------------------------------
              # Generate fluent-bit configuration if not marked to skip
              if [ "${skip_processing}" != "TRUE" ]; then
                print_debug "[logship] Creating Log ship entry for '${logrotate_path}' to be parsed by '${CONTAINER_LOGSHIPPING_BACKEND}'"

                # Configure database tracking for log position persistence
                if var_true "${FLUENTBIT_TAIL_DB_ENABLE}" ; then
                  tail_db=$(cat<<EOF
    DB                $(dirname ${logrotate_path})/.$(basename ${logrotate_path}).db
    DB.sync           ${FLUENTBIT_TAIL_DB_SYNC}
    DB.locking        ${FLUENTBIT_TAIL_DB_LOCK}
    DB.journal_mode   ${FLUENTBIT_TAIL_DB_JOURNAL_MODE}
EOF
                  )
                fi

                # Generate main INPUT configuration for this log file
                cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"
# Log File Shipping created automatically generated by reading ${logrotate_file}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[INPUT]
    Name              tail
    Path              ${logrotate_path}
    Tag               $(basename "${logrotate_file,,}")
    Buffer_Chunk_Size ${FLUENTBIT_TAIL_BUFFER_CHUNK_SIZE}
    Buffer_Max_Size   ${FLUENTBIT_TAIL_BUFFER_MAX_SIZE}
    Read_from_Head    ${FLUENTBIT_TAIL_READ_FROM_HEAD}
    Skip_Empty_Lines  ${FLUENTBIT_TAIL_SKIP_EMPTY_LINES}
    Skip_Long_Lines   ${FLUENTBIT_TAIL_SKIP_LONG_LINES}
${tail_key_path}
${logrotate_parser}
${tail_db}
${tail_ignore_older}
${tail_key_offset}
EOF
              fi
            fi
            set +f
          done

          #-------------------------------------------------------------------
          # RECORD MODIFIER FILTER GENERATION
          #-------------------------------------------------------------------
          # Add record modifier filter to enrich log entries with metadata
          # Only add if not already present to avoid duplicates
          if ! grep -q 'record_modifier' "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf" ; then
            cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"

[FILTER]
    Name record_modifier
    Match $(basename "${logrotate_file,,}")
    Record container_name ${CONTAINER_NAME}
    Record product $(basename "${logrotate_file,,}")
    Record hostname $(hostname)
EOF
          fi

          #-------------------------------------------------------------------
          # MULTIPLE PARSER FILTER GENERATION
          #-------------------------------------------------------------------
          # Add parser filter for multiple parser configurations
          # Uses multilog key for chained parsing operations
          if var_true "${multiple_parsers}" ; then
            if ! grep -q 'Reserve_Data' "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf" ; then
              cat <<EOF >> "/etc/fluent-bit/conf.d/in_tail_$(basename "${logrotate_file,,}").conf"

[FILTER]
    Name            parser
    Match           $(basename "${logrotate_file,,}")
    Preserve_Key    Off
    Reserve_Data    On
    Key_Name        multilog
${multi_parsers}
EOF
            fi
          fi

          # Reset variables for next iteration
          unset logrotate_parsers_full
          unset multiple_parsers
          unset multi_parsers
        done

        # Clean up any double slashes in generated configuration paths
        sed -i "s|//|/|g" /etc/fluent-bit/conf.d/*.conf

        # Create marker file to prevent re-running auto-configuration
        touch /tmp/.container/logship/logrotate
      fi
    fi

    #-------------------------------------------------------------------------
    # FLUENT-BIT SERVICE STARTUP
    #-------------------------------------------------------------------------
    # Start fluent-bit with the main configuration file
    print_start "[logship] Starting fluent-bit ${FLUENTBIT_VERSION}"
    output_on
    silent exec fluent-bit -c /etc/fluent-bit/fluent-bit.conf
  ;;
esac
